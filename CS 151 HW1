//1.1
Your name: Phuoc Tang Hong
Your student ID: 013587197
Your major: Computer Science
Your preferred email address: phuoc.tang@sjsu.edu 
Check one: [.] Undergraduate, [ ] Graduate, [ ] Open university 
Repeating the class? [ ] Yes, [.] No
Place and semester where you took a programming course in Java: Winter 2017 De Anza
Course number and grade received: A+
Place and semester where you took a course in data structures: Fall 2017 De Anza
Course number and grade received: C
Time it took you to answer the two questions below:
Did you ask anyone for help? [ ] Yes, [.] No
//1.2
public class Driver {
	public static void main ( String[] args)
	{
		System.out.println(uniqueLetters(""));
	}
	public static String uniqueLetters(String str)
	{
		//Compare each character with the string if match +1
		//it will match itself==> acceptable for counting is 1
		// if count = 1 add that string.char to answer
		//keep going with the rest
		if (str.length()==0)
		{
			return "your string is empty";
		}
		else
		{
			String stringanswer = "";
			int count;
			for (int i=0; i<str.length(); i++)
			{
				count =0;
				for (int j=0; j<str.length(); j++)
				{
					if (str.charAt(i)==str.charAt(j))
					{
						count ++;
					}
				}
				if (count ==1)
				{
					stringanswer += str.valueOf(str.charAt(i));
				}
			}
			return stringanswer;
		}
	}
}
//1.3
import java.util.*;
public class Encoding {
	public static void morseCodes(int m, int n)
	{
		int len = m+n;
		// First create a string with m dashes and n dots
		char a[] = new char[len];
		int idx = 0;
		while(m > 0)
		{
			a[idx] = '.';
			idx++;
			m--;
		}
		while(n > 0)
		{
			a[idx] = '-';
			idx++;
			n--;
		}
		TreeSet<String> result = new TreeSet<>(); // To store output strings (
		printPermutation(a, 0, len, result);
		//Print result
		for(String str : result)
	    {
	    	System.out.println(str);
	    }
	}
	
	private static void printPermutation(char[] a, int startIndex, int endIndex, TreeSet<String> result) {
	    if (startIndex == endIndex)//reached end of recursion, print the state of a
	    {
	        //System.out.println(new String(a));
	    	//String tmpStr = new String(a);
	    	//if(result.contains(tmpStr))
    		result.add(new String(a));
	    }
        else
        {
            //try to move the swap window from start index to end index
            //i.e 0 to a.length-1
            for (int x = startIndex; x < endIndex; x++) 
            {
                swap(a, startIndex, x);
                printPermutation(a, startIndex + 1, endIndex, result);
                swap(a, startIndex, x);
            }
        }
	}

	private static void swap(char[] a, int i, int x) {
	    char t = a[i];
	    a[i] = a[x];
	    a[x] = t;
	}
}

